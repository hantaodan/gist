1.安装jar包到本地仓库
mvn install:install-file 
-Dfile=xxx.jar # 本地 
-Dsources=xxx-sources.jar # 可选,源码
-DgroupId=xxx 
-DartifactId=xxx
-Dversion=xxx
-Dpackaging=jar

参考:http://maven.apache.org/plugins/maven-install-plugin/install-file-mojo.html

mvn install:install-file -Dfile=osworkflow-2.8.0.jar -DpomFile=osworkflow-2.8.0.pom -Dsources=osworkflow-2.8.0-sources.jar -DgroupId=opensymphony -DartifactId=osworkflow -Dpackaging=jar -Dversion=2.8.0
语法：
mvn install:install-file -Dfile=your-artifact-1.0.jar 
                        [-DpomFile=your-pom.xml] 
                        [-Dsources=src.jar] 
                        [-Djavadoc=apidocs.jar] 
                        [-DgroupId=org.some.group] 
                        [-DartifactId=your-artifact] 
                        [-Dversion=1.0] 
                        [-Dpackaging=jar] 
                        [-Dclassifier=sources] 
                        [-DgeneratePom=true] 
                        [-DcreateChecksum=true]


2.部署jar包到远程仓库
mvn deploy:deploy-file 
-Durl=file:///Users/dev/workspace/maven/repositories/xx  # 远程,此file:/// 本地必须为这样格式
-DgroupId=xxx
-DartifactId=xxx
-Dversion=1.0.0
-Dpackaging=jar
-Dfile=xxx.jar # 本地
-Dsources=xxx-sources.jar # 可选,源码

mvn clean deploy -Psonatype-oss-release -Dgpg.skip=true --settings target/travis/settings.xml
-Dgpg.skip=true # 跳过加密解密 http://maven.apache.org/plugins/maven-gpg-plugin/sign-mojo.html
-Psonatype-oss-release # 激活sonatype-oss-release(可能是错误，多余的)

https://raw.githubusercontent.com/goodow/maven/master/settings.xml
未知:
      <properties>
        <gpg.keyname>${env.GPG_KEYNAME}</gpg.keyname>
        <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>
      </properties>
      
部署到远程仓库:
1.settings.xml中增加用户名和密码配置
<servers>
    <server>
        <id>maven-repository-releases</id>
        <username>admin</username>
        <password>admin123</password>
    </server>
    <server>
        <id>maven-repository-snapshots</id>
        <username>admin</username>
        <password>admin123</password>
    </server>
</servers>
        2.在项目的pom.xml中增加以下内容
<build>
<plugins>
    <!-- 要将源码放上去，需要加入这个插件 -->
    <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.1</version>
        <configuration>
            <attach>true</attach>
        </configuration>
        <executions>
            <execution>
                <phase>compile</phase>
                <goals>
                    <goal>jar</goal>
                </goals>
            </execution>
        </executions>
    </plugin>
</plugins>
</build>

<distributionManagement>
<repository>
    <!--    这里的ID要和setting的id一致-->
    <id>maven-repository-releases</id>
    <url>http://maven私服的IP:8081/nexus/content/repositories/releases/</url>
</repository>
<snapshotRepository>
    <!--    这里的ID要和setting的id一致-->
    <id>maven-repository-snapshots</id>
    <url>http://maven私服的IP:8081/nexus/content/repositories/snapshots/</url>
</snapshotRepository>
</distributionManagement>
# 此处位可选项

3.mvn clean deploy



3.打源码包
(1) 直接到项目下，执行 mvn source:jar，可以在target目录下得到:xxx-sources.jar
(2) 发布到本地仓库中
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-source-plugin</artifactId>
      <version>2.1.2</version>
      <executions>
        <execution>
          <id>attach-sources</id>
          <phase>verify</phase>
          <goals>
            <goal>jar-no-fork</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
# verify vt. 核实；查证
# fork vi. 分叉；分歧
参考:http://maven.apache.org/plugins/maven-source-plugin/jar-no-fork-mojo.html
     http://maven.apache.org/plugins/maven-source-plugin/examples/configureplugin.html

4.Maven中-DskipTests和-Dmaven.test.skip=true的区别
在使用mvn package进行编译、打包时，Maven会执行src/test/java中的JUnit测试用例，有时为了跳过测试，会使用参数-DskipTests和-Dmaven.test.skip=true，这两个参数的主要区别是：
-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。
-Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。

